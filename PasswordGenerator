package examenfinal.examenfinal;
import java.security.SecureRandom;
import java.util.Random;

public class PasswordGenerator {

    public static final String LOWERCASE_CHARACTERS = "abcdefghijklmnopqrstuvwxyz";
    public static final String UPPERCASE_CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    public static final String DIGIT = "0123456789";
    public static final String SPECIAL_CHARACTERS = "!@#$%^&*()-_=+";

    public static String generatePassword(PasswordConfig config) {
        if (config == null) {
            throw new IllegalArgumentException("Password Configuracion nula.");
        }

        int totalLength = config.getMinLength();

        StringBuilder password = new StringBuilder();

        if (config.getMinDigits() > 0) {
            password.append(generateRandomPassword(config.getMinDigits(), DIGIT));
            totalLength -= config.getMinDigits();
        }

        if (config.getMinUpperCaseLetters() > 0) {
            password.append(generateRandomPassword(config.getMinUpperCaseLetters(), UPPERCASE_CHARACTERS));
            totalLength -= config.getMinUpperCaseLetters();
        }

        if (config.getMinLowerCaseLetters() > 0) {
            password.append(generateRandomPassword(config.getMinLowerCaseLetters(), LOWERCASE_CHARACTERS));
            totalLength -= config.getMinLowerCaseLetters();
        }

        if (config.getMinSpecialCharacters() > 0) {
            password.append(generateRandomPassword(config.getMinSpecialCharacters(), SPECIAL_CHARACTERS));
            totalLength -= config.getMinSpecialCharacters();
        }

        password.append(generateRandomPassword(totalLength, LOWERCASE_CHARACTERS + UPPERCASE_CHARACTERS + DIGIT + SPECIAL_CHARACTERS));

        return password.toString();
    }

    public static String generateRandomPassword(int length, String characters) {
        if (length <= 0) {
            return "";
        }

        Random random = new SecureRandom();
        StringBuilder password = new StringBuilder(length);

        for (int i = 0; i < length; i++) {
            password.append(characters.charAt(random.nextInt(characters.length())));
        }

        return password.toString();
    }
}
