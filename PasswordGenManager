package examenfinal.examenfinal;


public class PasswordGenManager {

    public String generatePassword(PasswordConfig config) {
        if (config == null) {
            throw new IllegalArgumentException("La configuración de la contraseña no puede ser nula.");
        }

        PasswordGenerator passwordGenerator = new PasswordGenerator();

        if (config.getMinLength() <= 0) {
            throw new IllegalArgumentException("La longitud mínima debe ser mayor que cero.");
        }

        // Implementa la lógica central de generación de contraseñas basada en la configuración
        StringBuilder password = new StringBuilder();

        // Genera al menos la cantidad mínima especificada de cada tipo de caracter
        if (config.getMinDigits() > 0) {
            password.append(passwordGenerator.generateRandomPassword(config.getMinDigits(), PasswordGenerator.DIGIT));
        }
        if (config.getMinUpperCaseLetters() > 0) {
            password.append(passwordGenerator.generateRandomPassword(config.getMinUpperCaseLetters(), PasswordGenerator.UPPERCASE_CHARACTERS));
        }
        if (config.getMinLowerCaseLetters() > 0) {
            password.append(passwordGenerator.generateRandomPassword(config.getMinLowerCaseLetters(), PasswordGenerator.LOWERCASE_CHARACTERS));
        }
        if (config.getMinSpecialCharacters() > 0) {
            password.append(passwordGenerator.generateRandomPassword(config.getMinSpecialCharacters(), PasswordGenerator.SPECIAL_CHARACTERS));
        }

        // Genera caracteres restantes para alcanzar la longitud mínima
        int remainingLength = config.getMinLength() - password.length();
        password.append(passwordGenerator.generateRandomPassword(remainingLength, PasswordGenerator.LOWERCASE_CHARACTERS +
                PasswordGenerator.UPPERCASE_CHARACTERS + PasswordGenerator.DIGIT + PasswordGenerator.SPECIAL_CHARACTERS));

        return password.toString();
    }

}
